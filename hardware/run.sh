#!/bin/bash

# Source aliases
shopt -s expand_aliases
. ~/.bash_aliases

stl_dir="$(pwd)/models/stl"
low_dir="$(pwd)/models/low"

hqual=64
lqual=8

dir[0]="design"
dir[1]="models"
dir[2]="models/ankle"
dir[3]="models/arm-parts"
dir[4]="models/complete-arms"
dir[5]="models/foot"
dir[6]="models/hand"
dir[7]="models/head"
dir[8]="models/hip"
dir[9]="models/motor"
dir[10]="models/Motor-FS6535"
dir[11]="models/Motor-FT5335M"
dir[12]="models/neck"
dir[13]="models/shin"
dir[14]="models/shoulder"
dir[15]="models/thigh"
dir[16]="models/torso"

render="--colorscheme=Starnight --preview --projection=perspective --viewall"

git_hash="$(git describe --always --abbrev=0 --match "NOT A TAG" --dirty="*"  | head -c8)"

sub="complete"

# build()
#
# Build the various file types.
#
# $1 The mode.
function build {
  # Setup virtual frame buffer if in vagrant
  this_user="$(whoami)"
  if [ $this_user == "vagrant" ]; then
    Xvfb -shmem -screen 0 1280x1024x24 &
    export DISPLAY=:0
  fi
  # Create new STL directory
  rm -rf "$stl_dir"
  mkdir "$stl_dir"
  # Create new low quality directory
  rm -rf "$low_dir"
  mkdir "$low_dir"
  # Loop over directories
  for d in "${dir[@]}"; do
    current="$(pwd)"
    cd $d
      # Build SCAD models
      for f in *.scad; do
        # Make sure we have a valid file
        [ -f "$f" ] || break
        echo "[>>] $d $f"
        openscad $f -D\$fn=$hqual -D\$qual=$hqual -o "$stl_dir/$f-$git_hash.stl"
        openscad $f -D\$fn=$lqual -D\$qual=$lqual -o "$low_dir/$f.stl"
        # Check if we want to render
        if [[ "$1" != "stl" ]]; then
          openscad $f $render -o $f.png
          # Test whether to animate
          if [ "${f/$sub}" != "$f" ]; then
            # Build frames
            ani=""
            for u in $(seq 0.025 0.025 1.0); do
              echo "[>>] $d $f $u"
              openscad $f -D\$t=$u $render -o $f.$u.png
              ani="$ani $f.$u.png"
            done
            # Create a GIF
            convert -delay 10 -loop 0 $ani $f.gif
          fi
        fi
      done
      # Build Ditaa diagrams
      for f in *.ditaa; do
        # Make sure we have a valid file
        [ -f "$f" ] || break
        file="${f%.*}"
        echo "[>>] $d $f"
        ditaa $f $file.png
      done
      # Build Markdown files
      for f in *.md; do
        # Make sure we have a valid file
        [ -f "$f" ] || break
        echo "[>>] $d $f"
        pandoc -s -o $f.pdf ${f}-metadata.txt $f $pndc
      done
    cd $current
  done
}

# clean()
#
# Remove the files generated by this script.
function clean {
  for d in "${dir[@]}"; do
    current="$(pwd)"
    cd $d
      rm *.gif
      rm *.pdf
      rm *.png
      rm *.stl
    cd $current
  done
  # Remove the output STL directory
  rm -rf "$stl_dir"
}

# help()
#
# Display the help for this script.
function help {
  echo "bash run.sh [OPT]"
  echo ""
  echo "  OPTions"
  echo ""
  echo "    build    Build this project"
  echo "               stl  Build STL files only"
  echo "    clean    Clean this project"
  echo "    help     Display this help"
  echo ""
  echo "  Examples"
  echo ""
  echo "      bash run.sh build"
  echo ""
  echo "    Build the files in this project."
}

# main()
#
# Begin running the code.
#
# @param $@ Command line parameters.
function main {
  case $1 in
    build)
      build $2
      ;;
    clean)
      clean
      ;;
    help)
      help
      exit 1
      ;;
    *)
      echo "Error: Use 'help' for more information"
      exit 1
      ;;
  esac
}

# NOTE: This must be at the bottom.
main $@
